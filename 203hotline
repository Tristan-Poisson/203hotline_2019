#!/usr/bin/env python3
#
# EPITECH PROJECT, 2020
# 201yams_2019
# File description:
# 201yams
#

import sys
import math
from time import time

C = lambda n, k: (math.factorial(n) // (math.factorial(k) * math.factorial(n - k)))
poisson = lambda c, k : ((math.exp(-c) * c ** k) / math.factorial(k))
binomial = lambda i, n, p : (C(n, i) * (p ** i) * ((1 - p) ** (n - i)))

def check_for_err():
    halp = open("help", "r")

    if len(sys.argv) > 1 and sys.argv[1] == "-h":
        print(halp.read(), end = '')
        sys.exit(0)
    if len(sys.argv) != 3 and len(sys.argv) != 2:
        print("Flag error. Try -h for more informations.")
        sys.exit(84)
    flag = []
    for i in range(1, len(sys.argv)):
        try:
            flag.append(int(sys.argv[i]))
        except ValueError:
            print("Flag error. Try -h for more informations.")
            sys.exit(84)
    return flag

def computation(val):
    if not 0 <= val[1] <= val[0]:
        exit(84)
    result = C(*val)
    val.reverse()
    print("{}-combinations of a set of size {}\n{}".format(*val, result))
    return 0

def distribution(val):
    if val < 0:
        exit(84)
    n = 3500
    p = val / (8 * 60 * 60)
    c = p * n
    bi_time = time()
    bi = [binomial(i, n, p) for i in range(51)]
    bi_over = sum(binomial(i, n, p) for i in range(26, 51)) * 100
    bi_time = (time() - bi_time) * 1000

    po = [poisson(c, i) for i in range(51)]

    print(bi, po, sep='\n')
    return 0

def calc(val):
    if len(val) == 1:
        distribution(val[0])
    else:
        computation(val)
    return 0

def main():
    x = check_for_err()
    calc(x)

if __name__ == "__main__":
    main()
